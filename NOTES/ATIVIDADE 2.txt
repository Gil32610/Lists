//NODE DUPLAMENTE ENCADEADO

package br.unicap.edi.dll;

public class DoublyLinkedNode<T extends Comparable <T>> {
    private DoublyLinkedNode<T> previous;
    private DoublyLinkedNode<T> next;
    private T content;


    public DoublyLinkedNode(T content) {
        this.content = content;
    }

    public DoublyLinkedNode<T> getPrevious() {
        return this.previous;
    }
    public void setPrevious(DoublyLinkedNode<T> previous) {
        this.previous = previous;
    }
    public DoublyLinkedNode<T> getNext() {
        return this.next;
    }
    public void setNext(DoublyLinkedNode<T> next) {
        this.next = next;
    }
    public T getContent() {
        return this.content;
    }
    public void setContent(T content) {
        this.content = content;
    }



    
    
}


// lista duplamente encadeada

package br.unicap.edi.dll;

public class DoublyLinkedList<T extends Comparable<T>> {
    private DoublyLinkedNode<T> first;
    private DoublyLinkedNode<T> last;
    private int quantity;
    private int capacity;

    public int getQuantity() {
        return this.quantity;
    }

    public boolean isEmpty() {
        if (this.quantity == 0 || this.first == null || this.last == null) {
            return true;
        }
        return false;
    }

    public DoublyLinkedList(int capacity) {
        this.capacity = capacity;
    }

    public boolean isFull() {
        if (this.quantity == this.capacity) {
            return true;
        }
        return false;
    }

    public void insertFirst(T content) {
        DoublyLinkedNode<T> node = new DoublyLinkedNode(content);
        if (this.isEmpty()) {
            this.first = node;
            this.last = node;
            this.quantity++;
        } else {
            node.setNext(this.first);
            this.first.setPrevious(node);
            this.first = node;
            this.quantity++;
        }
    }

    public void insertLast(T content) {
        DoublyLinkedNode<T> node = new DoublyLinkedNode(content);
        if (this.isEmpty()) {
            this.first = node;
            this.last = node;
            this.quantity++;
        } else {
            this.last.setNext(node);
            node.setPrevious(this.last);
            this.last = node;
            this.quantity++;
        }
    }

    public void showAll() {
        DoublyLinkedNode<T> current;
        if (this.isEmpty()) {
            System.out.println("Empty List");
        } else {
            current = this.first;
            while (current != null) {
                System.out.println(current.getContent() + " ");
                current = current.getNext();
            }
        }
    }

    public void reverseShowAll() {
        DoublyLinkedNode<T> current;
        if (this.isEmpty()) {
            System.out.println("Empty List");
        } else {
            current = this.last;
            while (current != null) {
                System.out.println(current.getContent() + " ");
                current = current.getPrevious();
            }
        }
    }

    public void removeFirst() {
        if (this.isEmpty()) {
            System.out.println("Empty list");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else {
            this.first = this.first.getNext();
            this.first.setPrevious(null);
            this.quantity--;
        }
    }

    public void removeLast() {
        if (this.isEmpty()) {
            System.out.println("Empty list");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else {
            this.last = this.last.getPrevious();
            this.last.setNext(null);
            this.quantity--;
        }
    }

    public void removeNode(T content) {
        DoublyLinkedNode<T> wasAdded = search(content);

        if (wasAdded == null) {
            System.out.println("Was not added to the List");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else if (this.first == wasAdded) {
            this.first = this.first.getNext();
            this.first.setPrevious(null);
            this.quantity--;
        } else if (this.last == wasAdded) {
            this.last = this.last.getPrevious();
            this.last.setNext(null);
            this.quantity--;
        } else {
            wasAdded.getPrevious().setNext(wasAdded.getNext());
            wasAdded.getNext().setPrevious(wasAdded.getPrevious());
            this.quantity--;
        }

    }

    public void insertionSort(T content) {
        DoublyLinkedNode<T> current;
        DoublyLinkedNode<T> node = new DoublyLinkedNode<>(content);
        if (this.isEmpty()) {
            this.first = node;
            this.last = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.first.getContent()) < 0) {
            this.first.setPrevious(node);
            node.setNext(this.first);
            this.first = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.last.getContent()) > 0) {
            this.last.setNext(node);
            node.setPrevious(this.last);
            this.last = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.first.getContent()) == 0) {
            System.out.println("Already exists");
        } else if (content.compareTo(this.last.getContent()) == 0) {
            System.out.println("Already exists");
        } else {
            current = this.first.getNext();
            while (current != null) {
                if (content.compareTo(current.getContent()) < 0) {
                    node.setNext(current);
                    node.setPrevious(current.getPrevious());
                    current.getPrevious().setNext(node);
                    current.setPrevious(node);
                    this.quantity++;
                    System.out.println("Content added!");
                    break;
                }
                if (content.compareTo(current.getContent()) == 0) {
                    System.out.println("Already exists");
                    break;
                } else {
                    current = current.getNext();
                }
            }
        }
    }

    public DoublyLinkedNode<T> search(T content) {
        if (this.isEmpty()) {
            return null;
        } else if (content.compareTo(this.last.getContent()) > 0) {
            return null;
        } else if (content.compareTo(this.last.getContent()) == 0) {
            return this.last;
        } else {
            DoublyLinkedNode<T> current = this.first;
            while (current.getNext() != null) {
                if (content.compareTo(current.getContent()) == 0) {
                    return current;
                }
                if (content.compareTo(current.getContent()) < 0) {
                    return null;
                }
                current = current.getNext();
            }
            return null;
        }

    }
    

}


//questão 1

//CLASSE ADVOGADOS SA

package Acesso;

import br.unicap.edi.dll.*;
import Pessoa.Pessoa;

public class AdvogadosSA {
    private DoublyLinkedList<Pessoa> acesso;

    public AdvogadosSA() {
        this.acesso = new DoublyLinkedList<Pessoa>(500);
    }

    public void cadastrar(Pessoa p) {
        if (this.acesso.isEmpty()) {
            this.acesso.insertLast(p);
        } else {
            DoublyLinkedNode<Pessoa> search = this.acesso.search(p);
            if (search == null) {
                this.acesso.insertLast(p);
            } else {
                System.out.println("Já cadastrado!");
            }
        }
    }

    public void cancelar() {
        if (this.acesso.isEmpty()) {
            System.out.println("Nenhum cadastro realizado!");
        } else {
            this.acesso.removeLast();
        }
    }

    public void exibir() {
        this.acesso.reverseShowAll();
    }

    public void verificar(String RG) {
        Pessoa p = new Pessoa(RG);
        DoublyLinkedNode<Pessoa> search = this.acesso.search(p);
        if (search != null) {
            System.out.println(search.getContent() + " está no prédio!");
        } else {
            System.out.println("Não está no prédio!");
        }
    }

    public void quantidade() {
        System.out.println("Há " + this.acesso.getQuantity() + " pessoa(s) no prédio.");
    }

    public void remover(String RG) {
        Pessoa p = new Pessoa(RG);
        this.acesso.removeNode(p);
        System.out.println("Operação concluída!");
    }
}


//CLASSE PESSOA

package Pessoa;

public class Pessoa implements Comparable<Pessoa> {
    private String nome;
    private String RG;

    public Pessoa(String nome, String RG) {
        this.nome = nome;
        this.RG = RG;
    }
    public Pessoa(String RG){
        this.RG = RG;
    }

    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getRG() {
        return RG;
    }

    public void setRG(String rG) {
        RG = rG;
    }

    @Override
    public int compareTo(Pessoa p) {
        int value = this.getRG().compareTo(p.getRG());
        return value;
    }

    @Override
    public String toString() {
        return "Pessoa [nome=" + nome + ", RG=" + RG + "]";
    }

}


//CLASSE MAIN

package Prédio;

import java.util.Scanner;

import Pessoa.Pessoa;
import Acesso.*;

public class Prédio {
    public static void main(String[] args) {
        int op;
        String nome, RG;
        AdvogadosSA adv = new AdvogadosSA();
        Scanner s = new Scanner(System.in);
        Pessoa p;

        do {
            System.out.println("Selecione a operação: ");
            options();
            op = Integer.parseInt(s.nextLine());
            switch (op) {
                case 1:
                    System.out.println("Informe o nome: ");
                    nome = s.nextLine();
                    System.out.println("Informe o RG:");
                    RG = s.nextLine();
                    p = new Pessoa(nome, RG);
                    adv.cadastrar(p);
                    System.out.println("Deseja cancelar a operação?");
                    System.out.println("1- sim\n" + "2 - não");
                    op = Integer.parseInt(s.nextLine());
                    if (op == 1) {
                        adv.cancelar();
                    }

                    break;
                case 2:
                    adv.exibir();
                    break;
                case 3:
                    System.out.println("Informe o RG da pessoa: ");
                    RG = s.nextLine();
                    adv.verificar(RG);
                    break;
                case 4:
                    adv.quantidade();
                    break;
                case 5:
                    System.out.println("Informe o RG da pessoa: ");
                    RG = s.nextLine();
                    adv.remover(RG);
                    break;
                case 0:
                    System.out.println("Concluído!");
                    break;
                default:
                    System.out.println("Opção inválida!");
                    break;
            }
        } while (op != 0);

    }

    public static void options() {
        System.out.println("1 - Fazer checkin\n" + "2 - Exibir pessoas no prédio\n" + "3 - Verificar pessoa\n"
                + "4 - Quantidade de pessoas no prédio\n" + "5 - Fazer checkout\n" + "0 - Encerrar");
    }
}



//questão 2

//Node duplamente encadeado

package br.unicap.edi.dlld;

public class DoublyLinkedNode<T extends Comparable <T>> {
    private DoublyLinkedNode<T> previous;
    private DoublyLinkedNode<T> next;
    private T content;


    public DoublyLinkedNode(T content) {
        this.content = content;
    }

    public DoublyLinkedNode<T> getPrevious() {
        return this.previous;
    }
    public void setPrevious(DoublyLinkedNode<T> previous) {
        this.previous = previous;
    }
    public DoublyLinkedNode<T> getNext() {
        return this.next;
    }
    public void setNext(DoublyLinkedNode<T> next) {
        this.next = next;
    }
    public T getContent() {
        return this.content;
    }
    public void setContent(T content) {
        this.content = content;
    }



    
    
}

//LISTA DUPLAMENTE ENCADEADA DECRESCENTE

package br.unicap.edi.dlld;

public class DoublyLinkedList<T extends Comparable<T>> {
    private DoublyLinkedNode<T> first;
    private DoublyLinkedNode<T> last;
    private int quantity;
    private int capacity;

    public int getQuantity() {
        return this.quantity;
    }

    public boolean isEmpty() {
        if (this.quantity == 0 || this.first == null || this.last == null) {
            return true;
        }
        return false;
    }

    public DoublyLinkedList(int capacity) {
        this.capacity = capacity;
    }

    public boolean isFull() {
        if (this.quantity == this.capacity) {
            return true;
        }
        return false;
    }

    public void insertFirst(T content) {
        DoublyLinkedNode<T> node = new DoublyLinkedNode(content);
        if (this.isEmpty()) {
            this.first = node;
            this.last = node;
            this.quantity++;
        } else {
            node.setNext(this.first);
            this.first.setPrevious(node);
            this.first = node;
            this.quantity++;
        }
    }

    public void insertLast(T content) {
        DoublyLinkedNode<T> node = new DoublyLinkedNode(content);
        if (this.isEmpty()) {
            this.first = node;
            this.last = node;
            this.quantity++;
        } else {
            this.last.setNext(node);
            node.setPrevious(this.last);
            this.last = node;
            this.quantity++;
        }
    }

    public void showAll() {
        DoublyLinkedNode<T> current;
        if (this.isEmpty()) {
            System.out.println("Empty List");
        } else {
            current = this.first;
            while (current != null) {
                System.out.println(current.getContent() + " ");
                current = current.getNext();
            }
        }
    }

    public void reverseShowAll() {
        DoublyLinkedNode<T> current;
        if (this.isEmpty()) {
            System.out.println("Empty List");
        } else {
            current = this.last;
            while (current != null) {
                System.out.println(current.getContent() + " ");
                current = current.getPrevious();
            }
        }
    }

    public void removeFirst() {
        if (this.isEmpty()) {
            System.out.println("Empty list");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else {
            this.first = this.first.getNext();
            this.first.setPrevious(null);
            this.quantity--;
        }
    }

    public void removeLast() {
        if (this.isEmpty()) {
            System.out.println("Empty list");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else {
            this.last = this.last.getPrevious();
            this.last.setNext(null);
            this.quantity--;
        }
    }

    public void removeNode(T content) {
        DoublyLinkedNode<T> wasAdded = search(content);

        if (wasAdded == null) {
            System.out.println("Was not added to the List");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else if (this.first == wasAdded) {
            this.first = this.first.getNext();
            this.first.setPrevious(null);
            this.quantity--;
        } else if (this.last == wasAdded) {
            this.last = this.last.getPrevious();
            this.last.setNext(null);
            this.quantity--;
        } else {
            wasAdded.getPrevious().setNext(wasAdded.getNext());
            wasAdded.getNext().setPrevious(wasAdded.getPrevious());
            this.quantity--;
        }

    }

    public void insertionSort(T content) {
        DoublyLinkedNode<T> current;
        DoublyLinkedNode<T> node = new DoublyLinkedNode<>(content);
        if (this.isEmpty()) {
            this.first = node;
            this.last = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.first.getContent()) > 0) {
            this.first.setPrevious(node);
            node.setNext(this.first);
            this.first = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.last.getContent()) < 0) {
            this.last.setNext(node);
            node.setPrevious(this.last);
            this.last = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.first.getContent()) == 0) {
            System.out.println("Already exists");
        } else if (content.compareTo(this.last.getContent()) == 0) {
            System.out.println("Already exists");
        } else {
            current = this.first.getNext();
            while (current != null) {
                if (content.compareTo(current.getContent()) > 0) {
                    node.setNext(current);
                    node.setPrevious(current.getPrevious());
                    current.getPrevious().setNext(node);
                    current.setPrevious(node);
                    this.quantity++;
                    System.out.println("Content added!");
                    break;
                }
                if (content.compareTo(current.getContent()) == 0) {
                    System.out.println("Already exists");
                    break;
                } else {
                    current = current.getNext();
                }
            }
        }
    }

    private DoublyLinkedNode<T> search(T content) {
        if (this.isEmpty()) {
            return null;
        } else if (content.compareTo(this.last.getContent()) > 0) {
            return null;
        } else if (content.compareTo(this.last.getContent()) == 0) {
            return this.last;
        } else {
            DoublyLinkedNode<T> current = this.first;
            while (current.getNext() != null) {
                if (content.compareTo(current.getContent()) == 0) {
                    return current;
                }
                if (content.compareTo(current.getContent()) > 0) {
                    return null;
                }
                current = current.getNext();
            }
            return null;
        }

    }

    public void searchContent(T content) {
        if (this.isEmpty()) {
            System.out.println("Empty list");
        } else if (this.first.getNext() == null) {
            if (content.compareTo(this.first.getContent()) == 0) {
                System.out.println("Content: " + this.first.getContent());
            } else {
                System.out.println("Was not added");
            }
        } else if (content.compareTo(this.last.getContent()) > 0) {
            System.out.println("Was not added!");

        } else if (content.compareTo(this.first.getContent()) < 0) {
            System.out.println("Was not added");
        } else {
            DoublyLinkedNode<T> current = this.first;
            while (current != null) {
                if (content.compareTo(current.getContent()) == 0) {
                    System.out.println("Content: " + current.getContent());
                    break;

                } else if (content.compareTo(current.getContent()) > 0) {
                    System.out.println("Was not added to the list");
                    break;
                } else {
                    current = current.getNext();
                }

            }
        }

    }

}

//classe teste:

package Integer;

import br.unicap.edi.dlld.*;
import java.util.Scanner;

public class IntegerList {
    public static void main(String[] args) {
        DoublyLinkedList<Integer> integerLinked = new DoublyLinkedList<Integer>(20);
        Scanner s = new Scanner(System.in);
        int number;
        int op;
        do {
            System.out.println("Selecione a opção: ");
            options();
            op = Integer.parseInt(s.nextLine());
            switch (op) {
                case 1:
                System.out.println("Informe o inteiro: ");
                number = Integer.parseInt(s.nextLine());
                integerLinked.insertionSort(number);
                    break;
                case 2:
                System.out.println("Informe o inteiro: ");
                number = Integer.parseInt(s.nextLine());
                integerLinked.removeNode(number);
                    break;
                case 3:
                integerLinked.showAll();
                    break;
                case 4:
                integerLinked.reverseShowAll();
                    break;
                case 5:
                System.out.println("Informe o inteiro: ");
                number = Integer.parseInt(s.nextLine());
                integerLinked.searchContent(number);
                    break;
                case 0:
                System.out.println("Concluido!");
                    break;
                default:
                System.out.println("Opção inválida!");
                    break;

            }
        } while (op != 0);

    }

    public static void options() {
        System.out.println("1 - Inserir inteiro na lista");
        System.out.println("2 - Remover inteiro da lista");
        System.out.println("3 - Exibir inteiros de forma decrescente");
        System.out.println("4 - Exibir inteiros de forma crescente");
        System.out.println("5 - Procurar e Exibir inteiro");
        System.out.println("0 - Encerrar");
    }
}

//QUESTÃO 3:


//NODE DUPLAMENTE ENCADEADO:


package br.unicap.edi.dll;

public class DoublyLinkedNode<T extends Comparable <T>> {
    private DoublyLinkedNode<T> previous;
    private DoublyLinkedNode<T> next;
    private T content;


    public DoublyLinkedNode(T content) {
        this.content = content;
    }

    public DoublyLinkedNode<T> getPrevious() {
        return this.previous;
    }
    public void setPrevious(DoublyLinkedNode<T> previous) {
        this.previous = previous;
    }
    public DoublyLinkedNode<T> getNext() {
        return this.next;
    }
    public void setNext(DoublyLinkedNode<T> next) {
        this.next = next;
    }
    public T getContent() {
        return this.content;
    }
    public void setContent(T content) {
        this.content = content;
    }



    
    
}

//LISTA DUPLAMENTE ENCADEADA CRESCENTE COM REPETIDOS:

package br.unicap.edi.dll;

public class DoublyLinkedList<T extends Comparable<T>> {
    private DoublyLinkedNode<T> first;
    private DoublyLinkedNode<T> last;
    private int quantity;
    private int capacity;

    public int getQuantity() {
        return this.quantity;
    }

    public boolean isEmpty() {
        if (this.quantity == 0 || this.first == null || this.last == null) {
            return true;
        }
        return false;
    }

    public DoublyLinkedList(int capacity) {
        this.capacity = capacity;
    }

    public boolean isFull() {
        if (this.quantity == this.capacity) {
            return true;
        }
        return false;
    }

    public void showAll() {
        DoublyLinkedNode<T> current;
        if (this.isEmpty()) {
            System.out.println("Empty List");
        } else {
            current = this.first;
            while (current != null) {
                System.out.println(current.getContent() + " ");
                current = current.getNext();
            }
        }
    }

    public void reverseShowAll() {
        DoublyLinkedNode<T> current;
        if (this.isEmpty()) {
            System.out.println("Empty List");
        } else {
            current = this.last;
            while (current != null) {
                System.out.println(current.getContent() + " ");
                current = current.getPrevious();
            }
        }
    }

    public void removeFirst() {
        if (this.isEmpty()) {
            System.out.println("Empty list");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else {
            this.first = this.first.getNext();
            this.first.setPrevious(null);
            this.quantity--;
        }
    }

    public void removeLast() {
        if (this.isEmpty()) {
            System.out.println("Empty list");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else {
            this.last = this.last.getPrevious();
            this.last.setNext(null);
            this.quantity--;
        }
    }

    public void removeNode(T content) {
        DoublyLinkedNode<T> wasAdded = search(content);

        if (wasAdded == null) {
            System.out.println("Was not added to the List");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else if (this.first == wasAdded) {
            this.first = this.first.getNext();
            this.first.setPrevious(null);
            this.quantity--;
        } else if (this.last == wasAdded) {
            this.last = this.last.getPrevious();
            this.last.setNext(null);
            this.quantity--;
        } else {
            wasAdded.getPrevious().setNext(wasAdded.getNext());
            wasAdded.getNext().setPrevious(wasAdded.getPrevious());
            this.quantity--;
        }

    }

    public void insertionSort(T content) {
        DoublyLinkedNode<T> current;
        DoublyLinkedNode<T> node = new DoublyLinkedNode<>(content);
        if (this.isEmpty()) {
            this.first = node;
            this.last = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.first.getContent()) < 0) {
            this.first.setPrevious(node);
            node.setNext(this.first);
            this.first = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.last.getContent()) > 0) {
            this.last.setNext(node);
            node.setPrevious(this.last);
            this.last = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.first.getContent()) == 0) {
            node.setNext(this.first);
            this.first.setPrevious(node);
            this.first = node;
            this.quantity++;
        } else if (content.compareTo(this.last.getContent()) == 0) {
            DoublyLinkedNode<T> repeated = this.search(content);
            node.setNext(repeated);
            node.setPrevious(repeated.getPrevious());
            repeated.setPrevious(node);
            this.quantity++;
        } else {
            current = this.first.getNext();
            while (current != null) {
                if (content.compareTo(current.getContent()) <= 0) {
                    node.setNext(current);
                    node.setPrevious(current.getPrevious());
                    current.getPrevious().setNext(node);
                    current.setPrevious(node);
                    this.quantity++;
                    System.out.println("Content added!");
                    break;
                } else {
                    current = current.getNext();
                }
            }
        }
    }

    public DoublyLinkedNode<T> search(T content) {
        if (this.isEmpty()) {
            return null;
        } else if (content.compareTo(this.last.getContent()) > 0) {
            return null;
        } else if (content.compareTo(this.last.getContent()) == 0) {
            return this.last;
        } else {
            DoublyLinkedNode<T> current = this.first;
            while (current.getNext() != null) {
                if (content.compareTo(current.getContent()) == 0) {
                    return current;
                }
                if (content.compareTo(current.getContent()) < 0) {
                    return null;
                }
                current = current.getNext();
            }
            return null;
        }

    }

}


//QUESTÃO 4:

//LISTA DUPLAMENTE ENCADEADA DECRESCENTE COM REPETIDOS:

package br.unicap.edi.dlld;

public class DoublyLinkedList<T extends Comparable<T>> {
    private DoublyLinkedNode<T> first;
    private DoublyLinkedNode<T> last;
    private int quantity;
    private int capacity;

    public int getQuantity() {
        return this.quantity;
    }

    public boolean isEmpty() {
        if (this.quantity == 0 || this.first == null || this.last == null) {
            return true;
        }
        return false;
    }

    public DoublyLinkedList(int capacity) {
        this.capacity = capacity;
    }

    public boolean isFull() {
        if (this.quantity == this.capacity) {
            return true;
        }
        return false;
    }

    public void showAll() {
        DoublyLinkedNode<T> current;
        if (this.isEmpty()) {
            System.out.println("Empty List");
        } else {
            current = this.first;
            while (current != null) {
                System.out.println(current.getContent() + " ");
                current = current.getNext();
            }
        }
    }

    public void reverseShowAll() {
        DoublyLinkedNode<T> current;
        if (this.isEmpty()) {
            System.out.println("Empty List");
        } else {
            current = this.last;
            while (current != null) {
                System.out.println(current.getContent() + " ");
                current = current.getPrevious();
            }
        }
    }

    public void removeFirst() {
        if (this.isEmpty()) {
            System.out.println("Empty list");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else {
            this.first = this.first.getNext();
            this.first.setPrevious(null);
            this.quantity--;
        }
    }

    public void removeLast() {
        if (this.isEmpty()) {
            System.out.println("Empty list");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else {
            this.last = this.last.getPrevious();
            this.last.setNext(null);
            this.quantity--;
        }
    }

    public void removeNode(T content) {
        DoublyLinkedNode<T> wasAdded = search(content);

        if (wasAdded == null) {
            System.out.println("Was not added to the List");
        } else if (this.quantity == 1) {
            this.first = null;
            this.last = null;
            this.quantity = 0;
        } else if (this.first == wasAdded) {
            this.first = this.first.getNext();
            this.first.setPrevious(null);
            this.quantity--;
        } else if (this.last == wasAdded) {
            this.last = this.last.getPrevious();
            this.last.setNext(null);
            this.quantity--;
        } else {
            wasAdded.getPrevious().setNext(wasAdded.getNext());
            wasAdded.getNext().setPrevious(wasAdded.getPrevious());
            this.quantity--;
        }

    }

    public void insertionDescendingSort(T content) {
        DoublyLinkedNode<T> current;
        DoublyLinkedNode<T> node = new DoublyLinkedNode<>(content);
        if (this.isEmpty()) {
            this.first = node;
            this.last = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.first.getContent()) > 0) {
            this.first.setPrevious(node);
            node.setNext(this.first);
            this.first = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.last.getContent()) < 0) {
            this.last.setNext(node);
            node.setPrevious(this.last);
            this.last = node;
            this.quantity++;
            System.out.println("Content added!");
        } else if (content.compareTo(this.first.getContent()) == 0) {
            current = this.first;
            while (current.getNext().getContent().compareTo(content) == 0) {
                current = current.getNext();
            }
            current.setNext(node);
            node.setNext(current.getNext());
            node.setPrevious(current);
            this.quantity++;
        } else if (content.compareTo(this.last.getContent()) == 0) {
            this.last.setNext(node);
            node.setPrevious(this.last);
            this.last = node;
            this.quantity++;
        } else {
            current = this.first.getNext();
            while (current != null) {
                if (content.compareTo(current.getContent()) > 0) {
                    node.setNext(current);
                    node.setPrevious(current.getPrevious());
                    current.getPrevious().setNext(node);
                    current.setPrevious(node);
                    this.quantity++;
                    System.out.println("Content added!");
                    break;
                } else if (content.compareTo(current.getContent()) == 0) {
                    continue;

                } else {
                    current = current.getNext();
                }
            }
        }
    }

    private DoublyLinkedNode<T> search(T content) {
        if (this.isEmpty()) {
            return null;
        } else if (content.compareTo(this.last.getContent()) > 0) {
            return null;
        } else if (content.compareTo(this.last.getContent()) == 0) {
            return this.last;
        } else {
            DoublyLinkedNode<T> current = this.first;
            while (current.getNext() != null) {
                if (content.compareTo(current.getContent()) == 0) {
                    return current;
                }
                if (content.compareTo(current.getContent()) > 0) {
                    return null;
                }
                current = current.getNext();
            }
            return null;
        }

    }

    public void searchContent(T content) {
        if (this.isEmpty()) {
            System.out.println("Empty list");
        } else if (this.first.getNext() == null) {
            if (content.compareTo(this.first.getContent()) == 0) {
                System.out.println("Content: " + this.first.getContent());
            } else {
                System.out.println("Was not added");
            }
        } else if (content.compareTo(this.last.getContent()) > 0) {
            System.out.println("Was not added!");

        } else if (content.compareTo(this.first.getContent()) < 0) {
            System.out.println("Was not added");
        } else {
            DoublyLinkedNode<T> current = this.first;
            while (current != null) {
                if (content.compareTo(current.getContent()) == 0) {
                    System.out.println("Content: " + current.getContent());
                    break;

                } else if (content.compareTo(current.getContent()) > 0) {
                    System.out.println("Was not added to the list");
                    break;
                } else {
                    current = current.getNext();
                }

            }
        }

    }

}













